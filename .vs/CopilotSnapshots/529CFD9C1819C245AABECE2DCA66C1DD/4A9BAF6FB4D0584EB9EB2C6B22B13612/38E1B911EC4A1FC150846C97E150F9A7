import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import morgan from 'morgan';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import { testConnection } from './database.js';

// Importar rutas
import authRoutes from './routes/auth.js';
import usuariosRoutes from './routes/usuarios.js';
import revendedoresRoutes from './routes/revendedores.js';
import tiposFichaRoutes from './routes/tipos-ficha.js';
import inventariosRoutes from './routes/inventarios.js';
import preciosRoutes from './routes/precios.js';
import entregasRoutes from './routes/entregas.js';
import ventasRoutes from './routes/ventas.js';
import stockGlobalRoutes from './routes/stock-global.js';
import reportesRoutes from './routes/reportes.js';
import configuracionRoutes from './routes/configuracion.js';
import tareasRoutes from './routes/tareas.js';
import dashboardRoutes from './routes/dashboard.js';
import cortesCajaRoutes from './routes/cortes-caja.js';
import trabajadoresRoutes from './routes/trabajadores.js';


// Configurar variables de entorno
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// Configurar rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 500,
  message: {
    error: 'Demasiadas solicitudes',
    detail: 'Has excedido el límite de solicitudes. Intenta de nuevo en 15 minutos.'
  },
  skip: (req) => {
    if (process.env.NODE_ENV === 'development' || !process.env.NODE_ENV) {
      const origin = req.headers.origin || req.ip;
      return origin && (origin.includes('localhost') || origin.includes('127.0.0.1'));
    }
    return false;
  }
});

// Middlewares globales
app.use(helmet());
app.use(limiter);
app.use(morgan('combined'));

// Configurar CORS
const corsOptions = {
  origin: function (origin, callback) {
    console.log('CORS Origin check:', origin);
    if (!origin) return callback(null, true);
    // Lista de orígenes permitidos
    const allowedOrigins = [
      'http://localhost:3000', 'http://localhost:5173', 'http://localhost:5003',
      'http://127.0.0.1:3000', 'http://127.0.0.1:5173', 'http://127.0.0.1:5003'
    ];
    if (allowedOrigins.includes(origin) || origin.includes('.ngrok.io') || origin.includes('.ngrok-free.app') || origin.includes('.ngrok.app') || origin.includes('.loca.lt')) {
      return callback(null, true);
    }

    if (process.env.NODE_ENV === 'development' && origin.startsWith('http://localhost')) {
      return callback(null, true);
    }
    callback(new Error('No permitido por CORS'));
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Cache-Control', 'X-File-Name'],
  exposedHeaders: ['Set-Cookie'],
  optionsSuccessStatus: 200,
  preflightContinue: false
};

app.use(cors(corsOptions));
app.options('*', cors(corsOptions)); // Habilitar pre-flight para todas las rutas

app.use(cookieParser());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Middleware para logging personalizado
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Rutas de health check
app.get('/', (req, res) => {
  res.json({ message: 'Sistema de Fichas WiFi API', version: '1.0.0', status: 'online' });
});

app.get('/health', async (req, res) => {
  try {
    const dbConnected = await testConnection();
    res.json({ status: 'healthy', database: dbConnected ? 'connected' : 'disconnected' });
  } catch (error) {
    res.status(503).json({ status: 'unhealthy', database: 'error', error: error.message });
  }
});

// ==================================================
// Registrar rutas de la API
// ==================================================
app.use('/api/auth', authRoutes);
app.use('/api/usuarios', usuariosRoutes);
app.use('/api/revendedores', revendedoresRoutes);
app.use('/api/tipos-ficha', tiposFichaRoutes);
app.use('/api/inventarios', inventariosRoutes);
app.use('/api/precios', preciosRoutes);
app.use('/api/entregas', entregasRoutes);
app.use('/api/ventas', ventasRoutes);
app.use('/api/stock-global', stockGlobalRoutes);
app.use('/api/reportes', reportesRoutes);
app.use('/api/configuracion', configuracionRoutes);
app.use('/api/tareas', tareasRoutes);
app.use('/api/dashboard', dashboardRoutes);
app.use('/api/cortes-caja', cortesCajaRoutes);
app.use('/api/trabajadores', trabajadoresRoutes);


// Middleware para rutas no encontradas
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Ruta no encontrada',
    detail: `La ruta ${req.method} ${req.originalUrl} no existe`,
  });
});

// Middleware global para manejo de errores
app.use((error, req, res, next) => {
  console.error('Error no manejado:', error);
  if (error.message === 'No permitido por CORS') {
    return res.status(403).json({ error: 'CORS Error', detail: 'Tu origen no está permitido' });
  }
  if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
    return res.status(400).json({ error: 'JSON inválido', detail: 'El cuerpo de la solicitud contiene JSON malformado' });
  }
  res.status(500).json({
    error: 'Error interno del servidor',
    detail: process.env.NODE_ENV === 'development' ? error.message : 'Ha ocurrido un error inesperado'
  });
});

// Función para iniciar el servidor
const startServer = async () => {
  try {
    const dbConnected = await testConnection();
    if (!dbConnected) {
      console.error('❌ No se pudo conectar a la base de datos. Verifica la configuración en .env');
      process.exit(1);
    }
    app.listen(PORT, () => {
      console.log(`\n🚀 Servidor iniciado en http://localhost:${PORT} [Entorno: ${process.env.NODE_ENV || 'development'}]`);
    });
  } catch (error) {
    console.error('❌ Error al iniciar el servidor:', error);
    process.exit(1);
  }
};

// Manejo de cierre graceful
process.on('SIGTERM', () => {
  console.log('🛑 Recibida señal SIGTERM, cerrando servidor...');
  process.exit(0);
});
process.on('SIGINT', () => {
  console.log('🛑 Recibida señal SIGINT, cerrando servidor...');
  process.exit(0);
});

// Iniciar servidor
startServer();

export default app;
